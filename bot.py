import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions
from telegram.ext import Application, ChatMemberHandler, CallbackQueryHandler, ContextTypes
from telegram.request import HTTPXRequest
import os
from time import time
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ URL –≤–µ–±—Ö—É–∫–∞
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –£–∫–∞–∂–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
PORT = int(os.getenv("PORT", 8080))     # –û–±—ã—á–Ω–æ 8080 –¥–ª—è Railway

if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
    exit(1)
if not WEBHOOK_URL:
    logger.error("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω! –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
    exit(1)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞–ø—á–∏
CAPTCHA_OPTIONS = ["ü•©", "üçÜ", "üí¶", "üßº"]
CORRECT_ANSWER = "üçÜ"
CAPTCHA_TIMEOUT = int(os.getenv("CAPTCHA_TIMEOUT", 60))  # 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç
BAN_DURATION = int(os.getenv("BAN_DURATION", 30 * 60))   # 30 –º–∏–Ω—É—Ç –±–∞–Ω–∞

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–ø—á–∏
pending_captcha = {}

async def on_user_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_member = update.chat_member
    user = chat_member.new_chat_member.user
    chat_id = chat_member.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
    if chat_member.old_chat_member.status in ("left", "kicked") and chat_member.new_chat_member.status == "member":
        logger.info(f"{user.full_name} –∑–∞—à–µ–ª –≤ —á–∞—Ç {chat_id}")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–æ–≤–∏—á–∫–∞
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user.id,
                permissions=ChatPermissions(can_send_messages=False)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤ {user.id}: {e}")
            return

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–∞–ø—á–∏
        keyboard = InlineKeyboardMarkup.from_column([
            InlineKeyboardButton(text=opt, callback_data=f"captcha:{user.id}:{opt}")
            for opt in CAPTCHA_OPTIONS
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É —Å –Ω–∞—à–∏–º —Å–º–µ—à–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        try:
            message = await context.bot.send_message(
                chat_id=chat_id,
                text=f"üïπÔ∏è {user.first_name}, –ß—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç—è—Ä–∞ —Å–∏–ª—å–≤–µ—Ä ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ üçÜ.\n"
                     f"–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –∏–Ω–∞—á–µ —É–ª–µ—Ç–∏—à—å *–≤ –±–∞–Ω—é* –ø–æ–ø–∞—Ä–∏—Ç—å—Å—è!",
                reply_markup=keyboard,
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—á–∏ {user.id}: {e}")
            return

        # –¢–∞–π–º–µ—Ä –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏
        async def captcha_timeout():
            try:
                await asyncio.sleep(CAPTCHA_TIMEOUT)
                if user.id in pending_captcha:
                    try:
                        await context.bot.ban_chat_member(
                            chat_id=chat_id,
                            user_id=user.id,
                            until_date=int(time() + BAN_DURATION)
                        )
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=f"üí• {user.first_name} –Ω–µ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É –∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç –≤ –≥–∞—á–∏-—Ç—Ä–µ–Ω–∞–∂—ë—Ä–∫—É."
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞ {user.id}: {e}")
                    del pending_captcha[user.id]
            except asyncio.CancelledError:
                pass

        pending_captcha[user.id] = {
            "message_id": message.message_id,
            "chat_id": chat_id,
            "task": asyncio.create_task(captcha_timeout())
        }

async def captcha_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split(":")
    if len(data) != 3:
        return

    _, user_id_str, selected = data
    user_id = int(user_id_str)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ—Ç, –∫–æ–º—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∫–∞–ø—á–∞
    if query.from_user.id != user_id:
        await query.edit_message_text("–±—Ä–∞—Ç–∏—à–∫–∞, —è –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è, –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–π —á—É–∂—É—é üçÜ")
        return

    chat_id = query.message.chat.id

    try:
        if selected == CORRECT_ANSWER:
            # –î–∞—ë–º –ø—Ä–∞–≤–∞ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True,
                )
            )
            await query.edit_message_text("‚úÖ –í–µ—Ä–Ω–æ! –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É! Welcome, –±–æ–µ—Ü üî´")
        else:
            # –ë–∞–Ω–∏–º –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
            await context.bot.ban_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                until_date=int(time() + BAN_DURATION)
            )
            await query.edit_message_text("üö´ –ú–∏–º–æ –±—Ä–æ, –∑–∞—á–∏–ª—å—Å—è –Ω–∞ –ø–æ–ª —á–∞—Å–∏–∫–∞...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–∞–ø—á–∏ {user_id}: {e}")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏
    if user_id in pending_captcha:
        pending_captcha[user_id]["task"].cancel()
        del pending_captcha[user.id]

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP-–∫–ª–∏–µ–Ω—Ç–∞
    request = HTTPXRequest(
        connection_pool_size=10,
        read_timeout=30.0,
        connect_timeout=30.0,
        pool_timeout=30.0,
        http_version="1.1"
    )

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).request(request).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(ChatMemberHandler(on_user_join, chat_member_types=["member"]))
    application.add_handler(CallbackQueryHandler(captcha_response, pattern=r"^captcha:\d+:.+"))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫...")
    await application.bot.set_webhook(url=WEBHOOK_URL)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞
    logger.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞...")
    await application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="/webhook",
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    asyncio.run(main())
