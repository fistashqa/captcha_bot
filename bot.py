import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions
from telegram.ext import Application, ChatMemberHandler, CallbackQueryHandler, ContextTypes
import os
import asyncio

TOKEN = os.getenv("BOT_TOKEN")  # –ù–∞ Railway –Ω—É–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–∞–ø—á—É
pending_captcha = {}

CAPTCHA_OPTIONS = ["ü•©", "üçÜ", "üí¶", "üßº"]
CORRECT_ANSWER = "üçÜ"
CAPTCHA_TIMEOUT = 60  # —Å–µ–∫—É–Ω–¥
BAN_DURATION = 30 * 60  # 30 –º–∏–Ω—É—Ç

async def on_user_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_member = update.chat_member
    user = chat_member.new_chat_member.user
    chat_id = chat_member.chat.id

    if chat_member.old_chat_member.status in ("left", "kicked") and chat_member.new_chat_member.status == "member":
        logger.info(f"{user.full_name} –∑–∞—à–µ–ª –≤ —á–∞—Ç {chat_id}")

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user.id,
            permissions=ChatPermissions(can_send_messages=False)
        )

        # –ö–Ω–æ–ø–æ—á–Ω–∞—è –∫–∞–ø—á–∞
        keyboard = InlineKeyboardMarkup.from_column([
            InlineKeyboardButton(text=opt, callback_data=f"captcha:{user.id}:{opt}")
            for opt in CAPTCHA_OPTIONS
        ])

        message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"üïπÔ∏è {user.first_name}, –ß—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç—è—Ä–∞ —Å–∏–ª—å–≤–µ—Ä ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ üçÜ.\n"
                 f"–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –∏–Ω–∞—á–µ —É–ª–µ—Ç–∏—à—å *–≤ –±–∞–Ω—é* –ø–æ–ø–∞—Ä–∏—Ç—å—Å—è!",
            reply_markup=keyboard,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pending_captcha[user.id] = {
            "message_id": message.message_id,
            "chat_id": chat_id
        }

        # –¢–∞–π–º–µ—Ä –Ω–∞ –∞–≤—Ç–æ-–±–∞–Ω
        await asyncio.sleep(CAPTCHA_TIMEOUT)

        # –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É –∑–∞ –≤—Ä–µ–º—è ‚Äî –±–∞–Ω
        if user.id in pending_captcha:
            await context.bot.ban_chat_member(chat_id=chat_id, user_id=user.id, until_date=asyncio.get_event_loop().time() + BAN_DURATION)
            await context.bot.send_message(chat_id=chat_id, text=f"üí• {user.first_name} –Ω–µ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É –∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç –≤ –≥–∞—á–∏-—Ç—Ä–µ–Ω–∞–∂—ë—Ä–∫—É.")
            del pending_captcha[user.id]

async def captcha_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split(":")
    if len(data) != 3:
        return

    _, user_id_str, selected = data
    user_id = int(user_id_str)

    if query.from_user.id != user_id:
        await query.edit_message_text("–±—Ä–∞—Ç–∏—à–∫–∞, —è –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è, –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–π —á—É–∂—É—é üçÜ")
        return

    chat_id = query.message.chat.id

    if selected == CORRECT_ANSWER:
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
            )
        )
        await query.edit_message_text("‚úÖ –í–µ—Ä–Ω–æ! –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É! Welcome, –±–æ–µ—Ü üî´")
    else:
        await context.bot.ban_chat_member(chat_id=chat_id, user_id=user_id, until_date=asyncio.get_event_loop().time() + BAN_DURATION)
        await query.edit_message_text("üö´ –ú–∏–º–æ –±—Ä–æ, –∑–∞—á–∏–ª—å—Å—è –Ω–∞ –ø–æ–ª —á–∞—Å–∏–∫–∞...")

    if user_id in pending_captcha:
        del pending_captcha[user_id]

async def main():
    application = Application.builder().token(TOKEN).build()

    # –•—ç–Ω–¥–ª–µ—Ä—ã
    application.add_handler(ChatMemberHandler(on_user_join, chat_member_types=["member"]))
    application.add_handler(CallbackQueryHandler(captcha_response, pattern=r"^captcha:\d+:.+"))

    logger.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
    await application.run_polling()

if __name__ == "__main__":
    import asyncio

    try:
        asyncio.run(main())
    except RuntimeError as e:
        if str(e).startswith("This event loop is already running"):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise
