import logging
import os
import asyncio
from time import time
from flask import Flask, request
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions
from telegram.ext import Application, ChatMemberHandler, CallbackQueryHandler, ContextTypes
from telegram.ext import ApplicationBuilder
from telegram.request import HTTPXRequest

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –í —Ñ–æ—Ä–º–∞—Ç–µ https://yourdomain.com/<secret_path>
CAPTCHA_OPTIONS = ["ü•©", "üçÜ", "üí¶", "üß¨"]
CORRECT_ANSWER = "üçÜ"
CAPTCHA_TIMEOUT = int(os.getenv("CAPTCHA_TIMEOUT", 60))
BAN_DURATION = int(os.getenv("BAN_DURATION", 30 * 60))

if not TOKEN or not WEBHOOK_URL:
    raise RuntimeError("BOT_TOKEN –∏/–∏–ª–∏ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω—ã!")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

pending_captcha = {}

app = Flask(__name__)

@app.route('/')
def health_check():
    return 'Bot is alive!'

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot.application.bot)
    asyncio.run(bot.application.process_update(update))
    return "OK"

# –ö–∞–ø—á–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
async def on_user_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_member = update.chat_member
    user = chat_member.new_chat_member.user
    chat_id = chat_member.chat.id

    if chat_member.old_chat_member.status in ("left", "kicked") and chat_member.new_chat_member.status == "member":
        logger.info(f"{user.full_name} –∑–∞—à–µ–ª –≤ —á–∞—Ç {chat_id}")

        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user.id,
            permissions=ChatPermissions(can_send_messages=False)
        )

        keyboard = InlineKeyboardMarkup.from_column([
            InlineKeyboardButton(text=opt, callback_data=f"captcha:{user.id}:{opt}")
            for opt in CAPTCHA_OPTIONS
        ])

        message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"üîπ {user.first_name}, –ù–∞–∂–º–∏ –Ω–∞ üçÜ, –∏–Ω–∞—á–µ 30 –º–∏–Ω –≤ –±–∞–Ω.",
            reply_markup=keyboard,
        )

        async def captcha_timeout():
            await asyncio.sleep(CAPTCHA_TIMEOUT)
            if user.id in pending_captcha:
                await context.bot.ban_chat_member(chat_id, user.id, until_date=int(time() + BAN_DURATION))
                await context.bot.send_message(chat_id, text=f"üí• {user.first_name} –Ω–µ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É, –±–∞–Ω.")
                del pending_captcha[user.id]

        pending_captcha[user.id] = {
            "task": asyncio.create_task(captcha_timeout())
        }

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É
async def captcha_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split(":")
    if len(data) != 3:
        return

    _, user_id_str, selected = data
    user_id = int(user_id_str)

    if query.from_user.id != user_id:
        await query.edit_message_text("–±—Ä–∞—Ç–∏—à–∫–∞, —ç—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–∞–ø—á–∞")
        return

    chat_id = query.message.chat.id

    if selected == CORRECT_ANSWER:
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions=ChatPermissions(can_send_messages=True)
        )
        await query.edit_message_text("‚úÖ –ü—Ä–∏–Ω—è—Ç!")
    else:
        await context.bot.ban_chat_member(chat_id, user_id, until_date=int(time() + BAN_DURATION))
        await query.edit_message_text("‚ùå –ú–∏–º–æ. –û—Ç–¥—ã—Ö–∞–π 30 –º–∏–Ω—É—Ç.")

    if user_id in pending_captcha:
        pending_captcha[user_id]["task"].cancel()
        del pending_captcha[user_id]

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
async def setup():
    request = HTTPXRequest()
    global bot
    bot = ApplicationBuilder().token(TOKEN).request(request).build()

    bot.add_handler(ChatMemberHandler(on_user_join, chat_member_types=["member"]))
    bot.add_handler(CallbackQueryHandler(captcha_response, pattern=r"^captcha:\d+:.+"))

    await bot.initialize()
    await bot.bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}")
    await bot.start()
    logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    asyncio.run(setup())
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
